#####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


#!/usr/bin/env python3

import rospy
import smach
import smach_ros
import yaml
import rospkg
import os
import cv2
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError


class Init(smach.State):
    def __init__(self):
        smach.State.__init__(self,outcomes=['outcome0'])
        rospy.set_param("current_parking_num",1)
    
    def execute(self,userdata):
        
        rospy.loginfo('Start statemacine')
        
        return 'outcome0'


class Go_parking(smach.State):
    def __init__(self):
        smach.State.__init__(self, outcomes=['outcome1'])
        rospack = rospkg.RosPack()
        package_path = rospack.get_path('beginner_tutorials')
        package_path = os.path.join(package_path,"config/parking_position.yaml")
        print(package_path)
        self.parking_yaml = rospy.get_param('~yaml_file',package_path)

    def get_next_pos(self,parking_num):
        with open(self.parking_yaml,'r') as file:
            try:
                params = yaml.safe_load(file)
                target_pos = params['parking_pos'][parking_num][0]

                return target_pos
            except yaml.YAMLError as exc:
                rospy.logger(f"Error parking YAML file: {exc}")


    def execute(self, userdata):
        parking_num = rospy.get_param("current_parking_num")
        pos = self.get_next_pos(parking_num)
        print(pos)
        
        
        rospy.loginfo('Go to park: ' + str(parking_num))
        rospy.sleep(1)
        return 'outcome1'


class Image_recog(smach.State):
    def __init__(self):
        smach.State.__init__(self, outcomes=['outcome2','outcome3'])

    def execute(self, userdata):
        rospy.loginfo('Number recognition start')
        rospy.sleep(1)
        return 'outcome2'


class Display_gui(smach.State):
    def __init__(self):
        smach.State.__init__(self, outcomes=['outcome4', "outcome5"])
        self.n = 0

    def execute(self, userdata):
        rospy.loginfo('Display gui')
        rospy.sleep(1)
        self.n += 1
        if self.n % 2 == 0:
            return "outcome4"
        else:
            return "outcome5"

# main
def main():
    rospy.init_node('smach_parking_system_state_machine')

    # Create a SMACH state machine
    sm = smach.StateMachine(outcomes=['EXIT'])

    # Open the container
    with sm:
        smach.StateMachine.add('Init', Init(),
                               transitions={'outcome0':'Go_parking'})
        # Add states to the container
        smach.StateMachine.add('Go_parking', Go_parking(),
                               transitions={'outcome1':'Image_recog'})

        # TODO: Fix transition to "HOGE" state instead of "FOO"
        smach.StateMachine.add('Image_recog', Image_recog(),
                               transitions={'outcome2':'Display_gui',
                                            'outcome3':'Go_parking',})

        # TODO: define new state "HOGE"
        smach.StateMachine.add('Display_gui', Display_gui(),
                               transitions={'outcome4':'EXIT',
                                            'outcome5':'Go_parking'})

    # Execute SMACH plan
    sis = smach_ros.IntrospectionServer("sm_server", sm, "/ROOT")
    sis.start()
    outcome = sm.execute()
    sis.stop()

if __name__ == '__main__':
    main()
